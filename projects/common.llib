local ffi = require("ffi")
--[[
	TODO:
		* UGH the names!!!! make them sensible
		* add enum to match the "type_id" in make_buffer
		* maybe rethink the make_buffer make_texture stuff so it is easier to just stamp them out and read/write
		* generally go over the stuff and try to simplify
		* maybe move some stuff to files so it could be easier to reuse (e.g. wave sim in other projects)
			* wave sim
			* agent sim
]]
ffi.cdef[[
typedef struct { uint8_t r, g, b, a; } rgba_pixel;
typedef struct { float r, g, b,a; } float_pixel;
typedef struct { float r, g; } float_half_pixel;
typedef struct { uint32_t r, g, b,a; } uint_pixel;
void free_image(char* data);
char* png_load(const char* path,int* w,int* h,int* comp,int need_comp);
]]

function make_buffer( typename,type_id,default_pixel )
	return function(w,h)
		local img={d=ffi.new(typename.."[?]",w*h),w=w,h=h,type=type_id}
		img.pixel=function ( init )
			return ffi.new(typename,init or default_pixel)
		end
		img.set=function ( t,x,y,v )
			t.d[x+t.w*y]=v
		end
		img.get=function ( t,x,y )
			return t.d[x+t.w*y]
		end
		img.sget=function ( t,x,y )
			if x<0 then error(string.format("x negative: %g",x)) end
			if y<0 then error(string.format("y negative: %g",y)) end
			if x>=t.w then error(string.format("x too large: %g vs %g",x,t.w)) end
			if y>=t.h then error(string.format("y too large: %g vs %g",y,t.h)) end
			if x+t.w*y>=t.w*t.h then error("data index too large") end
			return t.d[x+t.w*y]
		end
		if type_id==0 then
			img.present=function ( t )
				__present(t)
			end
		end
		img.read_frame=function ( t )
			__read_fb(t.d,t.w,t.h)
		end
		img.save=function ( t,path,suffix )
			__save_png(t,path,suffix,true)
		end
		img.clear=function ( t,c )
			local pix=c or t.pixel()
			for x=0,w-1 do
			for y=0,h-1 do
				t:set(x,y,pix)
			end
			end
		end
		img.write_texture=function(t, tex )
			tex:use(0)
			tex:set(t.d,t.w,t.h,t.type)
		end
		img.read_texture=function(t, tex )
			tex:read(t.d,t.type)
		end
		--some matrix functions... for fun?
		img.tostring=function ( t )
			return string.format("<arr:%s (%d x %d)>",typename,t.h,t.w)
		end
		img.tostring_full=function (t)
			local ret=string.format("<arr:%s (%d x %d)>\n",typename,t.h,t.w)

			for y=0,t.h-1 do
				local l=" "
				for x=0,t.w-1 do
					l=l..string.format("%g ",t:get(x,y))
				end
				ret=ret..l.."\n"
			end
			return ret
		end
		img.buffer_data=function ( t )
			if t.buf_data==nil then
				t.buf_data=buffer_data.Make()
			end
			return t.buf_data
		end
		img.update_buffer_data=function ( t,count )
			count=count or t.w*t.h
			local b=t:buffer_data()
			b:use()
			b:set(t.d,count*size_of_data[type_id])
			__unbind_buffer()
		end

		return img
	end
end

RGBA_PIX=0
FLTA_PIX=1
F_PIX=2
FL_PIX=3
U8_PIX=4
U32_PIX=5

size_of_data={
	[RGBA_PIX]=4*1,
	[FLTA_PIX]=4*4,
	[F_PIX]=4*1,
	[FL_PIX]=4*2,
	[U8_PIX]=1,
	[U32_PIX]=4*4,
}

make_image_buffer= make_buffer("rgba_pixel",RGBA_PIX,{0,0,0,255})
make_flt_buffer= make_buffer("float_pixel",FLTA_PIX,{0,0,0,1})
make_float_buffer=make_buffer("float",F_PIX,0)
make_flt_half_buffer=make_buffer("float_half_pixel",FL_PIX,{0,0})
make_char_buffer=make_buffer("uint8_t",U8_PIX,0)
make_u32_buffer=make_buffer("uint_pixel",U32_PIX,{0,0,0,0})

make_matrix=make_float_buffer
function make_ident_matrix( w,h )
	local ret=make_float_buffer(w,h)
	for x=0,w-1 do
		for y=0,h-1 do
			if x==y then
				ret:set(x,y,1)
			else
				ret:set(x,y,0)
			end
		end
	end
	return ret
end
-------------GUI

function make_config(tbl,defaults)
	local ret={}
	defaults=defaults or {}
	for i,v in ipairs(tbl) do
		if defaults[v[1]]==nil then
			ret[v[1]]= v[2]
		else
			ret[v[1]]=defaults[v[1]]
		end
		ret[i]=v
	end
	return ret
end

function draw_config( tbl )
	tbl.__change_events={}
	for _,entry in ipairs(tbl) do
		local name=entry[1]
		local v=tbl[name]
		local k=name
		if name=="__change_events" then
			--skip special (hidden?) entry
		elseif type(v)=="boolean" then
			if imgui.RadioButton(k,tbl[k]) then
				tbl[k]=not tbl[k]
			end
		elseif type(v)=="string" then
			local changing
			changing,tbl[k]=imgui.InputText(k,tbl[k])
			entry.changing=changing
		else --if type(v)~="table" then
			
			if entry.type=="int" then
				local changing
				changing,tbl[k]=imgui.SliderInt(k,tbl[k],entry.min or 0,entry.max or 100)
				entry.changing=changing
				imgui.SameLine()
				if imgui.Button("R##"..k) then
					entry.changing=true
					tbl[k]=math.random(entry.min or 0,entry.max or 100)
				end
			elseif entry.type=="float" then
				local changing
				changing,tbl[k]=imgui.SliderFloat(k,tbl[k],entry.min or 0,entry.max or 1,"%.3f",entry.power or 1)
				entry.changing=changing
				imgui.SameLine()
				if imgui.Button("R##"..k) then
					entry.changing=true
					local mm=entry.max or 1
					local mi=entry.min or 0
					tbl[k]=math.random()*(mm-mi)+mi
				end
			elseif entry.type=="angle" then
				local changing
				changing,tbl[k]=imgui.SliderAngle(k,tbl[k],entry.min or 0,entry.max or 360)
				entry.changing=changing
				imgui.SameLine()
				if imgui.Button("R##"..k) then
					entry.changing=true
					local mm=entry.max or 360
					local mi=entry.min or 0
					tbl[k]=math.random()*(mm-mi)+mi
				end
			elseif entry.type=="color" then
				local changing
				changing,tbl[k]=imgui.ColorEdit4(k,tbl[k],true)
				entry.changing=changing
				imgui.SameLine()
				if imgui.Button("R##"..k) then
					entry.changing=true
					local mm=entry.max or 1
					local mi=entry.min or 0
					tbl[k]={math.random(),math.random(),math.random(),1}
				end
			elseif entry.type=="floatsci" then
				local changing
				changing,tbl[k]=imgui.SliderFloat(k,tbl[k],entry.min or 0,entry.max or 1,"%g",entry.power or 1)
				entry.changing=changing
				imgui.SameLine()
				if imgui.Button("R##"..k) then
					entry.changing=true
					local mm=entry.max or 1
					local mi=entry.min or 0
					tbl[k]=math.random()*(mm-mi)+mi
				end
			elseif entry.type=="choice" then
				local changing
				changing,tbl[k]=imgui.Combo(k,tbl[k],entry.choices)
				entry.changing=changing
				imgui.SameLine()
				if imgui.Button("R##"..k) then
					entry.changing=true
					tbl[k]=math.random(0,#entry.choices-1)
				end
			end
			imgui.SameLine()
			if imgui.Button("Z##"..k) then
				entry.changing=true
				tbl[k]=entry[2]
			end
		end
	end
	for _,entry in ipairs(tbl) do
		if name~="__change_events" then
			if entry.watch and entry.changing then
				tbl.__change_events[entry[1]]=true
				tbl.__change_events.any=true
			end
		end
	end
end
function serialize_config( tbl,tbl_name )
	local ret=""
	tbl_name=tbl_name or "config"

	for _,entry in ipairs(tbl) do
		local name=entry[1]
		local v=tbl[name]
		local k=name
		if type(v)=="boolean" or type(v)=="string" then
			ret=ret..string.format("%s[%q]=%s\n",tbl_name,k,tbl[k])
		else --if type(v)~="table" then
			local simple_types={int=true,float=true,angle=true,floatsci=true}
			if simple_types[entry.type] then
				ret=ret..string.format("%s[%q]=%s\n",tbl_name,k,tbl[k])
			elseif entry.type=="color" then
				local c=tbl[k]
				ret=ret..string.format("%s[%q]={%s,%s,%s,%s}\n",tbl_name,k,c[1],c[2],c[3],c[4])
			else
				error("invalid config type")
			end
		end
	end
	return ret
end
function is_mouse_down(  )
	return __mouse.clicked0 and not __mouse.owned0, __mouse.x,__mouse.y
end

------------MISC

function make_copy( tbl )
	local ret={}
	for k,v in pairs(tbl) do
		ret[k]=v
	end
	return ret
end

function gaussian (mean, variance)
    return  math.sqrt(-2 * variance * math.log(math.random())) *
            math.cos(2 * math.pi * math.random()) + mean
end

function gaussian2 (mean1, variance1, mean2, variance2)
	local r1=math.random()
	local r2=math.random()
    return  math.sqrt(-2 * variance1 * math.log(r1)) * math.cos(2 * math.pi * r2) + mean1,
    		math.sqrt(-2 * variance2 * math.log(r1)) * math.sin(2 * math.pi * r2) + mean2
end

------------

function load_png( path )
	local w=ffi.new 'int[1]'
	local h=ffi.new 'int[1]'
	local comp=ffi.new 'int[1]'

	local data=ffi.C.png_load(path,w,h,comp,4)
	local ret=make_image_buffer(w[0],h[0])
	for i=0,w[0]*h[0]-1 do
		local p=ret.d[i]
		p.r=data[i*4]
		p.g=data[i*4+1]
		p.b=data[i*4+2]
		p.a=data[i*4+3]
	end
	ffi.C.free_image(data)
	return ret
end

----------------
function class(base, init)
   local c = {}    -- a new class instance
   if not init and type(base) == 'function' then
      init = base
      base = nil
   elseif type(base) == 'table' then
    -- our new class is a shallow copy of the base class!
      for i,v in pairs(base) do
         c[i] = v
      end
      c._base = base
   end
   -- the class will be the metatable for all its objects,
   -- and they will look up their methods in it.
   c.__index = c

   -- expose a constructor which can be called by <classname>(<args>)
   local mt = {}
   mt.__call = function(class_tbl, ...)
   local obj = {}
   setmetatable(obj,c)
   if init then
      init(obj,...)
   else 
      -- make sure that any stuff from the base class is initialized!
      if base and base.init then
      base.init(obj, ...)
      end
   end
   return obj
   end
   c.init = init
   c.is_a = function(self, klass)
      local m = getmetatable(self)
      while m do 
         if m == klass then return true end
         m = m._base
      end
      return false
   end
   setmetatable(c, mt)
   return c
end

Point = class(function(pt,x,y,z)
   pt:set(x,y,z or 0)
 end)

local function eq(x,y)
  return x == y
end

--function Point.__eq(p1,p2)
--  return eq(p1[1],p2[1]) and eq(p1[2],p2[2]) and eq(p1[3],p2[3])
--end

function Point.get(p)
  return p[1],p[2],p[3]
end

-- vector addition is '+','-'
function Point.__add(p1,p2)
  return Point(p1[1]+p2[1], p1[2]+p2[2], p1[3]+p2[3])
end

function Point.__sub(p1,p2)
  return Point(p1[1]-p2[1], p1[2]-p2[2], p1[3]-p2[3])
end

-- unitary minus  (e.g in the expression f(-p))
function Point.__unm(p)
  return Point(-p[1], -p[2], -p[3])
end

-- scalar multiplication and division is '*' and '/' respectively
function Point.__mul(s,p)
  return Point( s*p[1], s*p[2], s*p[3] )
end

function Point.__div(p,s)
  return Point( p[1]/s, p[2]/s, p[3]/s )
end

-- dot product is '..'
function Point.__concat(p1,p2)
  return p1[1]*p2[1] + p1[2]*p2[2] + p1[3]*p2[3]
end

-- cross product is '^'
function Point.__pow(p1,p2)
   return Point(
     p1[2]*p2[3] - p1[3]*p2[2],
     p1[3]*p2[1] - p1[1]*p2[3],
     p1[1]*p2[2] - p1[2]*p2[1]
   )
end

function Point.normalize(p)
  local l = p:len()
  p[1] = p[1]/l
  p[2] = p[2]/l
  p[3] = p[3]/l
end

function Point.set(pt,x,y,z)
  if type(x) == 'table'  then --and getmetatable(x) == Point
     local po = x
     x = po[1]
     y = po[2]
     z = po[3]
  end
  pt[1] = x
  pt[2] = y
  pt[3] = z 
end

function Point.translate(pt,x,y,z)
   pt[1] = pt[1] + x
   pt[2] = pt[2] + y
   pt[3] = pt[3] + z 
end

function Point.__tostring(p)
  return string.format('(%f,%f,%f)',p[1],p[2],p[3])
end

local function sqr(x) return x*x end

function Point.len(p)
  return math.sqrt(sqr(p[1]) + sqr(p[2]) + sqr(p[3]))
end
function Point.len_sq(p)
  return sqr(p[1]) + sqr(p[2]) + sqr(p[3])
end
--2d only!
function Point.rotate(p,angle,pivot)
  local s = math.sin(angle);
  local c = math.cos(angle);
  local ret
  pivot=pivot or Point(0,0)
  
  ret=Point(p[1]-pivot[1],p[2]-pivot[2])
  
  local xnew = ret[1] * c - ret[2] * s;
  local ynew = ret[1] * s + ret[2] * c;

  
  ret[1]=xnew+pivot[1]
  ret[2]=ynew+pivot[2]
  return ret
end
-------------------------------------------
GL_BYTE=			0x1400
GL_UNSIGNED_BYTE=	0x1401
GL_SHORT=			0x1402
GL_UNSIGNED_SHORT=	0x1403
GL_INT=				0x1404
GL_UNSIGNED_INT=	0x1405
GL_FLOAT=			0x1406
GL_2_BYTES=			0x1407
GL_3_BYTES=			0x1408
GL_4_BYTES=			0x1409
GL_DOUBLE=			0x140A
--------------------------------------------

multi_texture=class(
function(mb,w,h,buf_count,texture_type)
	mb.count=buf_count
	mb.type=texture_type
	mb.current=1
	mb:update_size(w,h)
end
)
function multi_texture:update_size( w,h )
	self.textures=self.textures or {}
 	if self.w~=w or self.h~=h then
 		self.w=w
 		self.h=h
 		for i=1,self.count do
 			local t=textures:Make()
 			t:use(0,1)
 			t:set(w,h,self.type)
 			self.textures[i]=t
 		end
 	end
end
function multi_texture:advance(  )
	self.current=self.current+1
	if self.current>self.count then
		self.current=1
	end
end
function multi_texture:get(offset)
	offset =offset or 0
	local id=self.current+offset
	id=((id-1) % self.count)+1
	return self.textures[id]
end
function multi_texture:get_next()
	return self:get(1)
end
function multi_texture:get_prev()
	return self:get(self.count-1)
end
-----------------------------------------
--TODO: better state on creation
multi_buffer=class(
function(mb,buf_count)
	mb.count=buf_count
	mb.current=1
	mb:reinit()
end
)
function multi_buffer:reinit(force)
	--TODO: implement force reinit or refactor etc..
	self.buffers=self.buffers or {}
 	for i=1,self.count do
 		if self.buffers[i]==nil or force then
 			local t=buffer_data.Make()
 			self.buffers[i]=t
 		end
 	end
end
function multi_buffer:advance(  )
	self.current=self.current+1
	if self.current>self.count then
		self.current=1
	end
end
function multi_buffer:get(offset)
	offset =offset or 0
	local id=self.current+offset
	id=((id-1) % self.count)+1
	return self.buffers[id]
end
function multi_buffer:get_next()
	return self:get(1)
end
function multi_buffer:get_prev()
	return self:get(self.count-1)
end
-----------------------------------------
gif_saver=class(
function(gs,fname,buffer,frames,frame_skip)
	gif_saver.start(gs,fname,buffer,frames,frame_skip)
end
)
function gif_saver:start(fname,buffer,frames,frame_skip )
	self:stop()
	__gif_start(buffer,fname)
	self.no_frames_to_save=frames
	self.frame_skip=frame_skip or 1
	self.current_frame=0
end
function gif_saver:stop()
	__gif_end()
	self.current_frame=0
	self.no_frames_to_save=0
end
--TODO: save frame only if change is >some value
function gif_saver:want_frame(  )
	if self.no_frames_to_save<=0 then
		return false
	end
	return ((self.current_frame+1) % self.frame_skip)==0
end
function gif_saver:frame( buffer,delay )
	--delay is optional
	self.current_frame=self.current_frame+1
	if self.current_frame % self.frame_skip==0 then
		self.no_frames_to_save=self.no_frames_to_save-1
		print("GIF FRAME, Left:",self.no_frames_to_save)
		__gif_frame(buffer,delay)
		if self.no_frames_to_save==0 then
			__gif_end()
		end
	end
end

