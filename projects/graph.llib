--[[
	graph transformations!

	TODO:
		-- coroutine version of matcher to get ALL possible matches
--]]
function add_node(network,data)
	local n={edges={}}
	if data and type(data)=="table" then
		for k,v in pairs(data) do
			n[k]=v
		end
	end
	--table.insert(network.nodes,n)
	network.nodes[n]=true
	return n
end
function link_nodes(network,a,b,data)
	local edge={a,b}
	if data and type(data)=="table" then
		for k,v in pairs(data) do
			edge[k]=v
		end
	end
	a.edges[edge]=true
	b.edges[edge]=true

	--table.insert(network.edges,edge)
end
function unlink_edge( e )
	e[1].edges[e]=nil
	e[2].edges[e]=nil
end
function edge_other( e,n )
	if e[1]==n then return e[2]
	else return e[1] end
end


function clone_tbl( tbl )
	local ret={}
	for k,v in pairs(tbl) do
		ret[k]=v
	end
	return ret
end
function printall( tbl )
	for k,v in pairs(tbl) do
		print(k,v)
	end
end
function has_edge( n1,n2 )
	for k,v in pairs(n1.edges) do
		if (k[1]==n1 and k[2]==n2) or (k[2]==n1 and k[1]==n2) then
			return true,k
		end
	end
	return false
end
function apply_rule( network, rule, matched )
	--[[ rule example
	local transform_rules_adv={
	{match={nodes={1,2,3,4},edges={{1,2},{2,3},{3,1},{3,4}},not_edges={}},
	 apply={remove_nodes={3},transform_node={{2,5},{1,6}},remove_edge={1,2},add_edge={{4,5},{4,6}}}
	}
	}
	--]]
	--collect all changes
	local node_changes={}
	local new_nodes={}

	if rule.remove_edge then
		for i,v in ipairs(rule.remove_edge) do
			local a=matched[v[1]]
			local b=matched[v[2]]
			local ok,e=has_edge(a,b)
			if ok then
				unlink_edge(e)
			end
		end
	end
	if rule.add_edge then
		for i,v in ipairs(rule.add_edge) do
			local a=matched[v[1]]
			local b=matched[v[2]]
			if not has_edge(a,b) then
				local new_edge={a,b}
				a.edges[new_edge]=true
				b.edges[new_edge]=true
			end
		end
	end

	--[=[
	for i,v in ipairs(rule.from.n) do
		if matched[rule.to.n[i]]==nil then
			local n=add_node(network)
			matched[rule.to.n[i]]=n
			table.insert(new_nodes,n)
		end
		node_changes[v]=rule.to.n[i]
	end

	local edge_changes={}
	for i,v in ipairs(rule.from.e) do
		if rule.to.e[i]==nil then
			local ok,e1=has_edge(matched[v[1]],matched[v[2]])
			unlink_edge(e1)
		end
		edge_changes[v]=rule.to.e[i]
	end
	--fix up outside edges to new nodes
	for from,to in pairs(node_changes) do
		local node_from=matched[from]
		local node_to=matched[to]
		for k,v in pairs(node_from.edges) do
			if k[1]==node_from then
				k[1]=node_to
			else
				k[2]=node_to
			end
			node_to.edges[k]=true
		end
		network.nodes[node_from]=nil
	end
	--]=]

	return new_nodes
end

function apply_random(network,rule)
	local nlist={}
	for k,v in pairs(network.nodes) do
		local pos=math.random(1,#nlist)
		table.insert(nlist,pos,k)
	end

	for i,v in ipairs(nlist) do
		local ok,matched=can_apply_rule(network,v,rule.match)
		print(ok,matched)
		if ok then
			return apply_rule(network,rule.apply,matched)
		end
	end
	return false
end
function update_edge_state( matching,rule,edge_state,not_edge_state )
	--[[
		rule edges can be in these states:
			unmatched - 0 nodes in this edge match i.e. didn't get to it
			partial - 1 node in this edge is set
			matched  - 2 nodes are set and actually have this edge
			mismatch - 2 nodes are set but don't have this edge <bad>

			matched in not_edges:
				2 nodes are set and have this edge <bad>
				2 nodes are set but dont have this edge
	--]]
	local partial_ret={}
	local bad=false
	local count_matched=0
	for i,v in ipairs(rule.edges) do
		local n1=matching[v[1]]
		local n2=matching[v[2]]
		if n1==nil and n2==nil then
			edge_state[i]="unmatched"
		else
			if n1~=nil and n2~=nil then
				if has_edge(n1,n2) then
					edge_state[i]="matched"
					count_matched=count_matched+1
				else
					edge_state[i]="mismatched"
					bad=true
				end
			else
				edge_state[i]="partial"
				table.insert(partial_ret,v)
			end
		end
	end

	for i,v in ipairs(rule.not_edges) do
		local n1=matching[v[1]]
		local n2=matching[v[2]]
		if n1==nil and n2==nil then
			not_edge_state[i]="unmatched"
		else
			if n1~=nil and n2~=nil then
				if has_edge(n1,n2) then
					not_edge_state[i]="matched"
					bad=true
				else
					not_edge_state[i]="mismatched"
				end
			else
				--not interested in partial "not_edges"
				not_edge_state[i]="partial"
			end
		end
	end

	return bad,partial_ret,count_matched
end
function reverse_table( tbl )
	local ret={}
	for k,v in pairs(tbl) do
		ret[v]=k
	end
	return ret
end
function can_apply_rule_recurse(rule,matching)

	local edge_state={}
	local not_edge_state={}
	local bad,partial,count_ok=update_edge_state(matching,rule,edge_state,not_edge_state)

	if bad then
		return false
	end
	if count_ok==#rule.edges then
		return true,matching
	end
	local rmatch=reverse_table(matching)
	for _,rule_e in ipairs(partial) do
		local n1=matching[rule_e[1]]
		local n2=matching[rule_e[2]]

		if n1 then
			for e,_ in pairs(n1.edges) do
				local node_other=edge_other(e,n1)
				if rmatch[node_other]==nil then
					local new_matching=clone_tbl(matching)
					new_matching[rule_e[2]]=node_other
					--print(rule_e[1],rule_e[2])
					local ok,res=can_apply_rule_recurse(rule,new_matching)
					if ok then
						return ok,res
					end
				end
			end
		else
			for e,_ in pairs(n2.edges) do
				local node_other=edge_other(e,n2)
				if rmatch[node_other]==nil then
					local new_matching=clone_tbl(matching)
					new_matching[rule_e[1]]=node_other
					--print(rule_e[1],rule_e[2])
					local ok,res=can_apply_rule_recurse(rule,new_matching)
					if ok then
						return ok,res
					end
				end
			end
		end
	end
	return false
end
function can_apply_rule( network, start_node, rule )
	--return true/false + list of nodes+edges that match the nodes in rule
	--[[
		* assume "rule.n[1]" is this node
		* try matching all the other nodes by using edges
			* use possible edges
		if matched return

		Maybe coroutine so we can iterate over all possible?
	--]]
	local matching={} --node id assignments
	--table.insert(matching,{rule.n[1],start_node})
	--matching.n[start_node]=rule.n[1]
	matching[rule.nodes[1]]=start_node
	return can_apply_rule_recurse(rule,matching)
end
function depth_first_rule_search( network, rule )
	--depth first "can_apply_rule" on all nodes
end

function depth_first_visitor( node,visited )
	coroutine.yield(node)
	visited[node]=true
	for k in pairs(node.edges) do
		local next_node
		if k[1]==node then
			next_node=k[2]
		else
			next_node=k[1]
		end
		if not visited[next_node] then
			depth_first_visitor(next_node,visited)
		end
	end
end
function depth_first( node )
	local visited={}
	return coroutine.wrap(function() depth_first_visitor( node ,visited) end)
end
function breadth_first_visitor(root )
	local visited={}
	local queue={}
	table.insert(queue,root)
	while #queue>0 do
		local node=queue[1]
		table.remove(queue,1)
		coroutine.yield(node)
		visited[node]=true
		for k in pairs(node.edges) do
			local next_node
			if k[1]==node then
				next_node=k[2]
			else
				next_node=k[1]
			end
			if not visited[next_node] then
				visited[next_node]=true
				table.insert(queue,next_node)
			end
		end
	end
end
function breadth_first( node )
	return coroutine.wrap(function() breadth_first_visitor( node ) end)
end
--[==[

local transform_rules_adv={
	{match={nodes={1,2,3,4},edges={{1,2},{2,3},{3,1},{3,4}},not_edges={}},
	 apply={remove_nodes={3},transform_node={{2,5},{1,6}},remove_edge={1,2},add_edge={{4,5},{4,6}}}
	}
}

local network={nodes={},--[[edges={}]]}
--network construction
local a=add_node(network)
a.name="a"
local b=add_node(network)
b.name="b"
local c=add_node(network)
c.name="c"

link_nodes(network,a,b)
link_nodes(network,a,c)
link_nodes(network,b,c)
do
	local cur_a=a
	local last_a=a
	for i=1,10 do
		cur_a=add_node(network)
		cur_a.name="a_"..i
		link_nodes(network,last_a,cur_a)
		last_a=cur_a
	end
end

do
	local cur_a=c
	local last_a=c
	for i=1,10 do
		cur_a=add_node(network)
		cur_a.name="c_"..i
		link_nodes(network,last_a,cur_a)
		last_a=cur_a
	end
end

-- [[
--for n in breadth_first(a) do
for n in pairs(network.nodes) do
	local ok,m=can_apply_rule(network,n,transform_rules_adv[1].match)
	print(n.name,ok)
	if ok then
		for i,v in ipairs(m) do
			print(' ',i,v.name)
		end
	end
end
local ok,m=can_apply_rule(network,a,transform_rules[1].from)
local nn=apply_rule(network, transform_rules[1], m)
for i,v in ipairs(nn) do
	v.name="new"..i
end
print("====================")
for n in breadth_first(nn[1]) do
	print(n.name)
end
--]]

]==]